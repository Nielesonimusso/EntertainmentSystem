/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.tue.ooad;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.JPanel;
/**
 *
 * @author s132054
 */
public class Display implements FrameConsumer, Runnable {

    private FrameProducer producer;
    private AudioFormat audioFormat;
    private boolean play;
    private JPanel displayPanel;
    
    public Display(JPanel displayPanel) {
        this.displayPanel = displayPanel;
    }

    @Override
    public void setProducer(FrameProducer producer) {
        this.producer = producer;
    }

    @Override
    public void run(){
        
        try {
            // Configure audio format
            boolean config = false;
            while(!config){
                if (producer.getAudioFormat() != null){
                    audioFormat = producer.getAudioFormat();
                    config = true;
                }
                Thread.sleep(100);
            }
            
            // Initialize object that plays sound
            DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
            SourceDataLine soundLine = (SourceDataLine) AudioSystem.getLine(info);
            soundLine.open(audioFormat);
            soundLine.start();
            
            // Consume stream frames generated by the producer
            while(true){
                if (play){
                    System.out.println("Stream playing!");
                    StreamFrame sf = producer.getStreamFrameQueue().take();
                    soundLine.write(sf.getFrame(), 0, sf.getFrame().length);                    
                } else {
                    System.out.println("Stream paused!");
                }
            }
        } catch (LineUnavailableException ex) {
            Logger.getLogger(FrameConsumer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FrameConsumer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
    void playStream() {
        play = true;
    }

    void pauseStream() {
        play = false;
    }
}
